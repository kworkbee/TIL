import{_ as n,o as a,c as s,a as e}from"./app.afe75d95.js";var t="/TIL/assets/DFS.001.10a61cab.jpeg",o="/TIL/assets/BFS.001.f72a0359.jpeg",i="/TIL/assets/DFS.002.7c0a34c8.jpeg";const c={},p=e('<h1 id="graph" tabindex="-1"><a class="header-anchor" href="#graph" aria-hidden="true">#</a> Graph</h1><hr><ul><li>\uAC1D\uCCB4\uC758 \uC77C\uBD80 \uC30D\uB4E4\uC774 \uC5F0\uAD00\uB418\uC5B4 \uC788\uB294 \uAC1D\uCCB4 \uC9D1\uD569 \uAD6C\uC870 <ul><li>\uC815\uC810(<code>Vertex</code>)\uACFC \uAC04\uC120(<code>Edge</code>)\uC758 \uC9D1\uD569</li><li>\uAD6C\uD604\uC5D0\uB294 <code>Adjacency Matrix</code> / <code>Adjacency List</code> \uC0AC\uC6A9</li></ul></li><li>\uADF8\uB798\uD504\uC758 \uAC01 \uC815\uC810\uC744 \uBC29\uBB38\uD558\uB294 \uADF8\uB798\uD504 \uC21C\uD68C (Traversal) \uC54C\uACE0\uB9AC\uC998\uC5D0 \uD06C\uAC8C <code>DFS</code> / <code>BFS</code> \uB85C \uB098\uB268</li></ul><h2 id="dfs" tabindex="-1"><a class="header-anchor" href="#dfs" aria-hidden="true">#</a> DFS</h2><blockquote><p>Depth-First Search, \uAE4A\uC774 \uC6B0\uC120 \uD0D0\uC0C9</p></blockquote><ul><li>\uB8E8\uD2B8 \uB178\uB4DC \uD639\uC740 \uC784\uC758\uC758 \uB178\uB4DC\uC5D0\uC11C \uC2DC\uC791\uD574 <strong>\uB2E4\uC74C branch\uB85C \uB118\uC5B4\uAC00\uAE30 \uC804\uAE4C\uC9C0 \uD604\uC7AC branch\uB97C \uC644\uBCBD\uD558\uAC8C \uD0D0\uC0C9</strong>\uD558\uB294 \uBC29\uBC95 (Deep)</li><li><code>\uC2A4\uD0DD</code> \uD639\uC740 <code>Recursive Call</code>\uB85C \uAD6C\uD604</li><li>\uC804\uC704 / \uC911\uC704 / \uD6C4\uC704 \uC21C\uD68C \uB4F1 \uD2B8\uB9AC \uC21C\uD68C\uB294 DFS\uC758 \uD55C \uC885\uB958</li><li>\uB178\uB4DC \uBC29\uBB38 \uC5EC\uBD80 \uD655\uC778 \uD544\uC694</li><li>\uAC80\uC0C9\uC758 <code>BFS</code> \uB300\uBE44 \uB0AE\uC740 \uD37C\uD3EC\uBA3C\uC2A4</li></ul><p><img src="'+t+`" alt="DFS"></p><blockquote><h3 id="backtracking" tabindex="-1"><a class="header-anchor" href="#backtracking" aria-hidden="true">#</a> Backtracking</h3><ul><li>\uC644\uC804 \uD0D0\uC0C9\uC73C\uB85C \uC5EC\uB7EC \uAC1C\uC758 \uC194\uB8E8\uC158\uC744 \uAC00\uC9C4 \uBB38\uC81C\uC5D0\uC11C, \uBAA8\uB4E0 \uC194\uB8E8\uC158\uC744 \uD0D0\uC0C9\uD558\uB294 \uC804\uB7B5 <ul><li>\uC5B4\uB5A4 \uB178\uB4DC\uC758 <code>\uC720\uB9DD\uD568(Promising)</code>\uC744 \uC810\uAC80\uD574 \uADF8\uB807\uC9C0 \uC54A\uC73C\uBA74 \uBC30\uC81C(\uAC00\uC9C0\uCE58\uAE30 - <code>Pruning</code>)\uC2DC\uD0A8\uB2E4. \uD574\uB2F9 \uB178\uB4DC\uC758 \uBD80\uBAA8 \uB178\uB4DC\uB85C \uB418\uB3CC\uC544\uAC00 \uB2E4\uB978 \uC790\uC2DD \uB178\uB4DC\uB97C \uAC80\uC0C9\uD55C\uB2E4.</li><li>\uAC00\uB2A5\uC131\uC774 \uC5C6\uC5B4\uBCF4\uC774\uB294 \uD6C4\uBCF4\uB97C \uACFC\uAC10\uD788 \uD3EC\uAE30\uD574 \uBAA8\uB4E0 \uACBD\uC6B0\uB97C \uD0D0\uC0C9\uD558\uB294 \uBE0C\uB8E8\uD2B8\uD3EC\uC2A4\uC640\uB294 \uCC28\uC774</li><li>\uC81C\uC57D \uCDA9\uC871 \uBB38\uC81C (CSP)\uB97C \uD480\uC774\uD558\uB294\uB370 \uD544\uC218\uC801\uC778 \uC54C\uACE0\uB9AC\uC998</li></ul></li></ul></blockquote><h3 id="time-complexity" tabindex="-1"><a class="header-anchor" href="#time-complexity" aria-hidden="true">#</a> Time Complexity</h3><ul><li><code>Adjacency Matrix</code> \uC0AC\uC6A9\uD558\uB294 \uACBD\uC6B0 <code>O(V^2)</code></li><li><code>Adjacency List</code> \uC0AC\uC6A9\uD558\uB294 \uACBD\uC6B0 \uB178\uB4DC \uC218 <code>V</code> + \uAC04\uC120 \uC218 <code>E</code> \uB9CC\uD07C\uC758 \uC2DC\uAC04\uBCF5\uC7A1\uB3C4 \uC18C\uC694 <code>O(|V| + |E|)</code></li></ul><h3 id="implementation" tabindex="-1"><a class="header-anchor" href="#implementation" aria-hidden="true">#</a> Implementation</h3><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">recursive_dfs</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> discovered<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    Recursive Call Version (Visiting by lexicographical order)
    &quot;&quot;&quot;</span>
    discovered<span class="token punctuation">.</span>append<span class="token punctuation">(</span>v<span class="token punctuation">)</span>
    <span class="token keyword">for</span> w <span class="token keyword">in</span> graph<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> w <span class="token keyword">not</span> <span class="token keyword">in</span> discovered<span class="token punctuation">:</span>
            discovered <span class="token operator">=</span> recursive_dfs<span class="token punctuation">(</span>w<span class="token punctuation">,</span> discovered<span class="token punctuation">)</span>
    <span class="token keyword">return</span> discovered
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">iterative_dfs</span><span class="token punctuation">(</span>startV<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    Iteration with Stack Version (Visiting by reversed order)
    &quot;&quot;&quot;</span>
    discovered <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    stack <span class="token operator">=</span> <span class="token punctuation">[</span>startV<span class="token punctuation">]</span>
    <span class="token keyword">while</span> stack<span class="token punctuation">:</span>
        v <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> v <span class="token keyword">not</span> <span class="token keyword">in</span> discovered<span class="token punctuation">:</span>
            discovered<span class="token punctuation">.</span>append<span class="token punctuation">(</span>v<span class="token punctuation">)</span>
            <span class="token keyword">for</span> w <span class="token keyword">in</span> graph<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">:</span>
                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>w<span class="token punctuation">)</span>
    <span class="token keyword">return</span> discovered
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="bfs" tabindex="-1"><a class="header-anchor" href="#bfs" aria-hidden="true">#</a> BFS</h2><blockquote><p>Breadth-First Search, \uB108\uBE44 \uC6B0\uC120 \uD0D0\uC0C9</p></blockquote><ul><li>\uB8E8\uD2B8 \uB178\uB4DC \uD639\uC740 \uC784\uC758\uC758 \uB178\uB4DC\uC5D0\uC11C \uC2DC\uC791\uD574 <strong>\uC778\uC811\uD55C \uB178\uB4DC\uB97C \uC6B0\uC120\uC801\uC73C\uB85C \uD0D0\uC0C9</strong>\uD558\uB294 \uBC29\uBC95 (Breadth)</li><li><code>\uD050</code>\uB97C \uD65C\uC6A9\uD574 \uAD6C\uD604</li><li><code>\uCD5C\uB2E8\uAC70\uB9AC</code>\uB97C \uCC3E\uB294 <code>Dijkstra</code> \uC54C\uACE0\uB9AC\uC998 \uB4F1\uC5D0 \uC0AC\uC6A9</li></ul><p><img src="`+o+`" alt="BFS"></p><h3 id="time-complexity-1" tabindex="-1"><a class="header-anchor" href="#time-complexity-1" aria-hidden="true">#</a> Time Complexity</h3><ul><li><code>Adjacency Matrix</code> \uC0AC\uC6A9\uD558\uB294 \uACBD\uC6B0 <code>O(V^2)</code></li><li><code>Adjacency List</code> \uC0AC\uC6A9\uD558\uB294 \uACBD\uC6B0 \uB178\uB4DC \uC218 <code>V</code> + \uAC04\uC120 \uC218 <code>E</code> \uB9CC\uD07C\uC758 \uC2DC\uAC04\uBCF5\uC7A1\uB3C4 \uC18C\uC694 <code>O(|V| + |E|)</code></li></ul><h3 id="implementation-1" tabindex="-1"><a class="header-anchor" href="#implementation-1" aria-hidden="true">#</a> Implementation</h3><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">iterative_dfs</span><span class="token punctuation">(</span>startV<span class="token punctuation">)</span><span class="token punctuation">:</span>
    discovered <span class="token operator">=</span> <span class="token punctuation">[</span>startV<span class="token punctuation">]</span>
    queue <span class="token operator">=</span> <span class="token punctuation">[</span>startV<span class="token punctuation">]</span>
    <span class="token keyword">while</span> queue<span class="token punctuation">:</span>
        v <span class="token operator">=</span> queue<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> w <span class="token keyword">in</span> graph<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> w <span class="token keyword">not</span> <span class="token keyword">in</span> discovered<span class="token punctuation">:</span>
                discovered<span class="token punctuation">.</span>append<span class="token punctuation">(</span>w<span class="token punctuation">)</span>
                queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>w<span class="token punctuation">)</span>
    <span class="token keyword">return</span> discovered
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="\u1100\u1173\u1105\u1162\u1111\u1173\u110B\u1174-\u1112\u116A\u11AF\u110B\u116D\u11BC" tabindex="-1"><a class="header-anchor" href="#\u1100\u1173\u1105\u1162\u1111\u1173\u110B\u1174-\u1112\u116A\u11AF\u110B\u116D\u11BC" aria-hidden="true">#</a> \uADF8\uB798\uD504\uC758 \uD65C\uC6A9</h2><ul><li><ol><li>\uADF8\uB798\uD504\uC758 \uBAA8\uB4E0 \uC815\uC810\uC744 \uBC29\uBB38\uC774 \uC8FC\uC694\uD55C \uACBD\uC6B0</li></ol></li><li><ol start="2"><li>\uACBD\uB85C\uC758 \uD2B9\uC9D5\uC744 \uD30C\uC545\uD574\uC57C \uD558\uB294 \uACBD\uC6B0</li></ol></li><li><ol start="3"><li>\uCD5C\uB2E8\uAC70\uB9AC\uB97C \uAD6C\uD574\uC57C \uD558\uB294 \uACBD\uC6B0</li></ol></li></ul><hr><h3 id="topological-sort" tabindex="-1"><a class="header-anchor" href="#topological-sort" aria-hidden="true">#</a> Topological Sort</h3><blockquote><p>\uC704\uC0C1 \uC815\uB82C</p></blockquote><ul><li>DFS\uB97C \uC0AC\uC6A9\uD574 \uD480 \uC218 \uC788\uB294 \uBC29\uC2DD\uC73C\uB85C, <strong>\uC758\uC874\uC131 \uC788\uB294 \uC791\uC5C5\uC774 \uC8FC\uC5B4\uC9C8 \uB54C, \uC5B4\uB5A4 \uC21C\uC11C\uB85C \uC218\uD589\uD574\uC57C \uD558\uB294\uC9C0 \uACC4\uC0B0\uD558\uB294 \uBC29\uBC95</strong></li></ul><p><img src="`+i+'" alt="Topological Sort"></p>',30),l=[p];function d(r,u){return a(),s("div",null,l)}var v=n(c,[["render",d],["__file","Graph.html.vue"]]);export{v as default};
